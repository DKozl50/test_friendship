openapi: "3.0.0"
info:
  version: "1"
  title: Friendship Test
  description: |
    Put your friendships to the test! Create a quiz about your preferences, 
    share it with your friends, and find out how well they know you. 
    Strengthen your bonds as you discover who's on the same wavelength. Play now!
servers:
  - url: https://pipeweb.ru:3000
paths:
  /users/init:
    post:
      summary: Initializes or looks up a user in the database.
      operationId: "init"
      parameters: 
        - in: header
          name: Authorization
          required: true
          schema: 
            $ref: "#/components/schemas/InitData"
      requestBody:
        content:
          application/json:
            {}
      responses:
        200:
          description: User successfully created or found in database.
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    $ref: "#/components/schemas/User"
                  is_new_user:
                    type: boolean
                additionalProperties: false
                required:
                  - user
                  - is_new_user
        400:
          $ref: "#/components/responses/IncorrectRequest"
        401:
          $ref: "#/components/responses/NotAuthorized"
        403:
          description: Forbidden to have more than one test (subject to change).
          content:
            application/json:
              schema: 
                $ref: "#/components/schemas/ErrorMessage"
        406:
          $ref: "#/components/responses/NotAcceptable"
        415:
          $ref: "#/components/responses/UnsupportedMediaType"
        429:
          $ref: "#/components/responses/TooManyRequests"
        500:
          $ref: "#/components/responses/InternalServerError"
  /tests/createTest:
    post:
      summary: Creates a new test for a user.
      operationId: "createTest"
      parameters: 
        - in: header
          name: Authorization
          required: true
          schema: 
            $ref: "#/components/schemas/InitData"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/QuestionsAPIArray"
      responses:
        200:
          description: Test successfully created.
          content:
            application/json:
              schema:
                type: object
                properties:
                  test:
                    $ref: "#/components/schemas/Test"
                additionalProperties: false
        400:
          $ref: "#/components/responses/IncorrectRequest"
        401:
          $ref: "#/components/responses/NotAuthorized"
        406:
          $ref: "#/components/responses/NotAcceptable"
        415:
          $ref: "#/components/responses/UnsupportedMediaType"
        429:
          $ref: "#/components/responses/TooManyRequests"
        500:
          $ref: "#/components/responses/InternalServerError"
  /tests/sendAnswer:
    post:
      summary: Registers an answer and returns results.
      operationId: "sendAnswer"
      parameters: 
        - in: header
          name: Authorization
          required: true
          schema: 
            $ref: "#/components/schemas/InitData"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                test_id:
                  $ref: "#/components/schemas/TestId"
                guesses:
                  type: array
                  items:
                    $ref: "#/components/schemas/Guess"
                  minItems: 1
                  maxItems: 100
              additionalProperties: false
              required:
                - test_id
                - guesses
      responses:
        200:
          description: Answer was successfully sent.
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    type: array
                    items:
                      type: object
                      properties:
                        question_id:
                          $ref: "#/components/schemas/QuestionId"
                        is_correct:
                          type: boolean
                      additionalProperties: false
                      required:
                        - question_id
                        - is_correct
                    minItems: 1
                    maxItems: 100
                additionalProperties: false
                required:
                  - result
        400:
          $ref: "#/components/responses/IncorrectRequest"
        401:
          $ref: "#/components/responses/NotAuthorized"
        404:
          description: Test with provided test_id not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
        406:
          $ref: "#/components/responses/NotAcceptable"
        415:
          $ref: "#/components/responses/UnsupportedMediaType"
        429:
          $ref: "#/components/responses/TooManyRequests"
        500:
          $ref: "#/components/responses/InternalServerError"
  /tests/getTest/{test_id}:
    get:
      summary: Gets a test by ID.
      operationId: "getTest"
      parameters: 
        - in: header
          name: Authorization
          required: true
          schema: 
            $ref: "#/components/schemas/InitData"
        - in: path
          name: test_id
          required: true
          schema:
            $ref: "#/components/schemas/TestId"
      responses:
        200:
          description: Test was successfully returned.
          content:
            application/json:
              schema:
                type: object
                properties: 
                  test: 
                    $ref: "#/components/schemas/Test"
                additionalProperties: false
        400:
          $ref: "#/components/responses/IncorrectRequest"
        401:
          $ref: "#/components/responses/NotAuthorized"
        403:
          description: Forbidden to get information about this test.
          content:
            application/json:
              schema: 
                $ref: "#/components/schemas/ErrorMessage"
        404:
          description: Test with provided test_id not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
        406:
          $ref: "#/components/responses/NotAcceptable"
        415:
          $ref: "#/components/responses/UnsupportedMediaType"
        429:
          $ref: "#/components/responses/TooManyRequests"
        500:
          $ref: "#/components/responses/InternalServerError"
  /tests/getQuestions/{test_id}:
    get:
      summary: Gets the questions for a test.
      operationId: "getQuestions"
      parameters: 
        - in: header
          name: Authorization
          required: true
          schema: 
            $ref: "#/components/schemas/InitData"
        - in: path
          name: test_id
          required: true
          schema:
            $ref: "#/components/schemas/TestId"
      responses:
        200:
          description: Questions were successfully returned.
          content:
            application/json:
              schema:
                type: object
                properties:
                  owner_tg_id: 
                    $ref: "#/components/schemas/TgId"
                  questions:
                    $ref: "#/components/schemas/QuestionsAPIArray"
                additionalProperties: false
        400:
          $ref: "#/components/responses/IncorrectRequest"
        401:
          $ref: "#/components/responses/NotAuthorized"
        403: 
          description: Forbidden to get questions for this test.
          content:
            application/json:
              schema: 
                $ref: "#/components/schemas/ErrorMessage"
        404:
          description: Test with provided test_id not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
        406:
          $ref: "#/components/responses/NotAcceptable"
        415:
          $ref: "#/components/responses/UnsupportedMediaType"
        429:
          $ref: "#/components/responses/TooManyRequests"
        500:
          $ref: "#/components/responses/InternalServerError"
  /tests/deleteTest:
    post: 
      summary: Deletes a test by ID.
      operationId: "deleteTest"
      parameters: 
        - in: header
          name: Authorization
          required: true
          schema: 
            $ref: "#/components/schemas/InitData"
      requestBody:
        content:
          application/json:
            schema:
              additionalProperties: false
              type: object
              properties:
                test_id:  
                  $ref: "#/components/schemas/TestId"
              required:
                - test_id
      responses:
        200:
          description: Test was successfully deleted.
          content:
            application/json:
              schema:
                properties:
                  success:
                    type: boolean
                additionalProperties: false
        400:
          $ref: "#/components/responses/IncorrectRequest"
        401:
          $ref: "#/components/responses/NotAuthorized"
        403: 
          description: Forbidden to delete this test.
          content:
            application/json:
              schema: 
                $ref: "#/components/schemas/ErrorMessage"
        404:
          description: Test with provided test_id not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
        406:
          $ref: "#/components/responses/NotAcceptable"
        415:
          $ref: "#/components/responses/UnsupportedMediaType"
        429:
          $ref: "#/components/responses/TooManyRequests"
        500:
          $ref: "#/components/responses/InternalServerError"
components:
  responses:
    # 400
    IncorrectRequest:
      description: The request is incorrect.
    # 401
    NotAuthorized:
      description: The requester is unauthorized.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorMessage"
    # 406
    NotAcceptable:
      description: Server is unable to provide response.
    # 415
    UnsupportedMediaType:
      description: Unsupported media type.
    # 429
    TooManyRequests:
      description: Too many requests. Try again later.
    # 500
    InternalServerError:
      description: Internal server error.
  schemas:
    AnswerId:
      description: |
        Sequential ID of answer inside one question.
        Currently questions consist of exactly 2 answers, but this is subject to change.
      type: integer
      format: int32
      minimum: 0
      maximum: 9
    TestId:
      description: ID of tests, created by backend.
      type: integer
      format: int64
      minimum: 0
      example: 123
    TgId:
      description: Telegram ID of user.
      type: integer
      format: int64
      minimum: 0
      example: 123456789
    QuestionId:
      description: |
        Sequential ID of question inside one test. 
        Currently tests consist of exactly 10 questions, but this is subject to change.
      type: integer
      format: int32
      minimum: 0
      maximum: 99
    InitData:
      description: |
        WebApp.initData that is used for authorization.  Read more in 
        https://core.telegram.org/bots/webapps#validating-data-received-via-the-mini-app
      type: string
    TgUserName:
      description: Telegram user's username.
      type: string
      example: John Smith
    Time:
      description: Datetime string.
      type: string
      example: 2023-12-30T12:34:56.789Z
    Answer:
      description: Answer object.
      type: object
      properties:
        id:
          $ref: "#/components/schemas/AnswerId"
        icon:
          type: string
        text:
          type: string
      additionalProperties: false
      required:
        - id
        - icon
        - text
      example:
        id: 1
        icon: https://emojigraph.org/media/144/apple/hot-face_1f975.png
        text: Chili
    Guess:
      description: Object that stores individual guess.
      type: object
      properties:
        answer_id:
          $ref: "#/components/schemas/AnswerId"
        question_id:
          $ref: "#/components/schemas/QuestionId"
      additionalProperties: false
      required:
        - answer_id
        - question_id
    Question:
      description: |
        Question object. Currently question_type is ignored, 
        but it can be used later to specify different question types like having more answers.
      type: object
      properties:
        id:
          $ref: "#/components/schemas/QuestionId"
        answers:
          type: array
          items:
            $ref: "#/components/schemas/Answer"
          minItems: 2
          maxItems: 10
        correct_answer_id:
          allOf:
            - writeOnly: true
            - $ref: "#/components/schemas/AnswerId"
          additionalProperties: false
        question_type:
          type: string
        text:
          type: string
      additionalProperties: false
      required:
        - id
        - answers 
        - correct_answer_id
        - question_type
        - text
      example:
        id: 2
        answers:
          - id: 0
            icon: https://emojigraph.org/media/144/apple/hot-face_1f975.png
            text: Chili
          - id: 1
            icon: https://emojigraph.org/media/144/apple/cold-face_1f976.png
            text: Ice cream
        correct_answer_id: 0
        question_type: choose2
        text: What does $name like more?
    QuestionsAPIArray:
      description: Convenience schema for backend-frontend interaction
      type: object
      properties:
        questions:
          type: array
          items:
            $ref: "#/components/schemas/Question"
          minItems: 1
          maxItems: 100
      additionalProperties: false
      required:
        - questions
    Result:
      description: |
        Object that stores a single result. 
        Username is taken from database whenever Result is returned
      type: object
      properties:
        guesses:
          type: array
          items:
            $ref: "#/components/schemas/Guess"
          minItems: 1
          maxItems: 100
        user_name:
          allOf:
            - readOnly: true
            - $ref: "#/components/schemas/TgUserName"
          additionalProperties: false
        user_tg_id:
          $ref: "#/components/schemas/TgId"
      additionalProperties: false
      required:
        - guesses
        - user_tg_id
    Test:
      description: |
        Test object. ID and date of creation is set by backend. 
        Results are appended each time someone finishes a test.
      type: object
      properties:
        id:
          allOf:
            - readOnly: true
            - $ref: '#/components/schemas/TestId'
          additionalProperties: false
        date_of_creation:
          allOf:
            - readOnly: true
            - $ref: "#/components/schemas/Time"
          additionalProperties: false
        owner_tg_id:
          type: integer
        questions:
          type: array
          items:
            $ref: "#/components/schemas/Question"
          minItems: 1
          maxItems: 100
        results:
          readOnly: true
          type: array
          items:
            $ref: "#/components/schemas/Result"
          minItems: 0
      additionalProperties: false
      required:
        - owner_tg_id
        - questions
    User:
      description: |
        User object. Currently only one test is allowed per person, but this is subject to change.
      type: object
      properties:
        tg_id:
          $ref: "#/components/schemas/TgId"
        name:
          $ref: "#/components/schemas/TgUserName"
        test_ids:
          readOnly: true
          type: array
          items:
            $ref: "#/components/schemas/TestId"
          minItems: 0
          maxItems: 1
      additionalProperties: false
      required:
        - name
        - tg_id
    ErrorMessage:
      description: Message returned with some errors
      type: object
      properties:
        message:
          type: string
          example: Not authorized
      additionalProperties: false
